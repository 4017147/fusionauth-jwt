/*
 * Copyright (c) 2017-2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

package io.fusionauth.der;

import io.fusionauth.pem.domain.PEM;
import org.testng.annotations.Test;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Base64;
import java.util.List;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

/**
 * @author Daniel DeGroff
 */
public class DerInputStreamTest {
  @Test
  public void bitstring_with_ignored_bits() throws Exception {
    // Assert the example encoding provided here:
    // https://security.stackexchange.com/questions/10392/parsing-the-id-ce-keyusage-extension-in-x-509-certs

    // Without ignoring the last bit the result of 0x06 would be 0b00000110 (8 bits)
    assertEquals(0x06, 0b00000110);

    // Chop 1 to 4 bits off
    for (int i : new int[]{0x01, 0x02, 0x03, 0x04}) {
      byte[] bytes = new byte[]{
          0x03,     // Tag: Bit String
          0x02,     // Length: 2 bytes to follow
          (byte) i, // Leading byte: Ignore the last bit (0b00000001)
          0x06      // The byte to encode too bits
      };

      DerInputStream is = new DerInputStream(bytes);
      DerValue value = is.readDerValue();
      assertTrue(value.tag.is(Tag.BitString));
      assertEquals(value.getLength(), 2);

      // But because we ignore the last bit as instructed, it will be 8 bits - n (where n = i)
      assertEquals(value.getBitString().length(), 8 - i);
      assertEquals(value.getBitString(), "00000110".substring(0, 8 - i));
    }
  }

  @Test
  public void ec_private_key_notEncapsulated() throws Exception {
    // These keys are not yet encapsulated in a PKCS#8 PEM
    List<String> files = Arrays.asList(
        "ec_private_prime256v1_p_256_openssl.pem",
        "ec_private_secp384r1_p_384_openssl.pem",
        "ec_private_secp521r1_p_512_openssl.pem");

    for (int i = 0; i < files.size(); i++) {
      String rawPEM = new String(Files.readAllBytes(Paths.get("src/test/resources/" + files.get(i))));

      int startIndex = rawPEM.indexOf(PEM.EC_PRIVATE_KEY_PREFIX);
      int endIndex = rawPEM.indexOf(PEM.EC_PRIVATE_KEY_SUFFIX);

      String base64 = rawPEM.substring(startIndex + PEM.EC_PRIVATE_KEY_PREFIX.length(), endIndex).replaceAll("\\s+", "");
      byte[] bytes = Base64.getDecoder().decode(base64);

      // This is an EC private key, encapsulate it in a PKCS#8 format to be compatible with the Java key factory
      //
      // EC Private key
      // ------------------------------------------------------
      // PrivateKeyInfo ::= SEQUENCE {
      //   version         Version,
      //   PrivateKey      OCTET STRING
      //   [0]             Context Specific
      //        curve       - OBJECT IDENTIFIER
      //   [1]             Context Specific
      //        -           - BIT STRING
      // }

      DerInputStream is = new DerInputStream(bytes);
      DerValue[] sequence = is.getSequence();

      assertEquals(sequence.length, 4);
      assertEquals(sequence[0].tag.value, Tag.Integer);
      assertEquals(sequence[1].tag.value, Tag.OctetString);
      assertEquals(sequence[2].tag.value, 0);
      assertEquals(sequence[2].tag.tagClass, TagClass.ContextSpecific);
      assertEquals(sequence[3].tag.value, 1);
      assertEquals(sequence[3].tag.tagClass, TagClass.ContextSpecific);

      // Version 1
      assertEquals(sequence[0].getBigInteger().intValue(), 1);

      // Curve OID
      if (i == 0) {
        assertEquals(sequence[2].getOID().decode(), ObjectIdentifier.ECDSA_P256);
      } else if (i == 1) {
        assertEquals(sequence[2].getOID().decode(), ObjectIdentifier.ECDSA_P384);
      } else {
        assertEquals(sequence[2].getOID().decode(), ObjectIdentifier.ECDSA_P521);
      }
    }
  }

  @Test
  public void ec_public_key_256() throws Exception {
    PEM pem = PEM.decode(Paths.get("src/test/resources/ec_public_key_p_256.pem"));

    // DER Encoded Public Key Format SubjectPublicKeyInfo
    // ------------------------------------------------------
    // SubjectPublicKeyInfo ::= SEQUENCE {
    //   algorithm         AlgorithmIdentifier,
    //   subjectPublicKey  BIT STRING
    // }
    //
    // AlgorithmIdentifier ::= SEQUENCE {
    //   algorithm       OBJECT IDENTIFIER,
    //   parameters      ANY DEFINED BY algorithm OPTIONAL
    // }

    DerInputStream is = new DerInputStream(pem.publicKey.getEncoded());
    DerValue[] sequence = is.getSequence();

    assertEquals(sequence.length, 2);
    assertTrue(sequence[0].tag.is(Tag.Sequence));

    DerInputStream nested = new DerInputStream(sequence[0].toByteArray());
    ObjectIdentifier encryptionOID = nested.getOID();
    assertEquals(encryptionOID.toString(), ObjectIdentifier.EC_ENCRYPTION);
    ObjectIdentifier curveOID = nested.getOID();
    assertEquals(curveOID.toString(), ObjectIdentifier.ECDSA_P256);

    // Account for all of the bytes in the first sequence
    assertEquals(encryptionOID.value.length + curveOID.value.length + 4, nested.length);

    // The last portion of the key is the public key in a bit string
    assertEquals(sequence[1].tag.value, Tag.BitString);
    assertEquals(sequence[1].getBitString().length(), 520);
    assertEquals(sequence[1].getBitString(), "0000010000110100100001011010100110110000100001111001101011010010101011001100000111011011011001001011010010111010110100001100011011110001110100011000010101100010101000010000100010011110111111110100001011101101100110000001100110111000101010110111000010001110011110101000100101010001010001011011010100111000001000100010001001111100111111110111111000111000011111101001111101010110001010100110111000100110111001110101000110111101101011111011010000010110010001011011001101111100000011111010010100001100001101111001100111001101");
  }

  @Test
  public void ec_public_key_384() throws Exception {
    PEM pem = PEM.decode(Paths.get("src/test/resources/ec_public_key_p_384.pem"));

    // DER Encoded Public Key Format SubjectPublicKeyInfo
    // ------------------------------------------------------
    // SubjectPublicKeyInfo ::= SEQUENCE {
    //   algorithm         AlgorithmIdentifier,
    //   subjectPublicKey  BIT STRING
    // }
    //
    // AlgorithmIdentifier ::= SEQUENCE {
    //   algorithm       OBJECT IDENTIFIER,
    //   parameters      ANY DEFINED BY algorithm OPTIONAL
    // }

    DerInputStream is = new DerInputStream(pem.publicKey.getEncoded());
    DerValue[] sequence = is.getSequence();

    assertEquals(sequence.length, 2);
    assertTrue(sequence[0].tag.is(Tag.Sequence));

    DerInputStream nested = new DerInputStream(sequence[0].toByteArray());
    ObjectIdentifier encryptionOID = nested.getOID();
    assertEquals(encryptionOID.toString(), ObjectIdentifier.EC_ENCRYPTION);
    ObjectIdentifier curveOID = nested.getOID();
    assertEquals(curveOID.toString(), ObjectIdentifier.ECDSA_P384);

    // Account for all of the bytes in the first sequence
    assertEquals(encryptionOID.value.length + curveOID.value.length + 4, nested.length);

    // The last portion of the key is the public key in a bit string
    assertEquals(sequence[1].tag.value, Tag.BitString);
    assertEquals(sequence[1].getBitString().length(), 776);
    assertEquals(sequence[1].getBitString(), "00000100110011111010100100110001100111000000111111000111011001001111111100101101111101000101111101010111000001000111111110011000011000100000100000011101010000100010111000000101101011011100101110100001010010000100100101101110110100100110110001011100010001001000010011001000101110001001000110111011011000100000101101010010010110011000010100100110000001000111001101101111111101001001110100111110101110000011010010100001100011001110000111010001011110101001000001111001100101100101111100000001111100000010101100111110000000111000100100110001011011101100111100011100100101111110001111011111000100110100100000000000101101101010000100111011110110000010011101100001011011011011111001011001001111001101011100100101101011110011100010111010101011010010011111110001110101010011101110010100");
  }

  @Test
  public void ec_public_key_521() throws Exception {
    PEM pem = PEM.decode(Paths.get("src/test/resources/ec_public_key_p_521.pem"));

    // DER Encoded Public Key Format SubjectPublicKeyInfo
    // ------------------------------------------------------
    // SubjectPublicKeyInfo ::= SEQUENCE {
    //   algorithm         AlgorithmIdentifier,
    //   subjectPublicKey  BIT STRING
    // }
    //
    // AlgorithmIdentifier ::= SEQUENCE {
    //   algorithm       OBJECT IDENTIFIER,
    //   parameters      ANY DEFINED BY algorithm OPTIONAL
    // }

    DerInputStream is = new DerInputStream(pem.publicKey.getEncoded());
    DerValue[] sequence = is.getSequence();

    assertEquals(sequence.length, 2);
    assertTrue(sequence[0].tag.is(Tag.Sequence));

    DerInputStream nested = new DerInputStream(sequence[0].toByteArray());
    ObjectIdentifier encryptionOID = nested.getOID();
    assertEquals(encryptionOID.toString(), ObjectIdentifier.EC_ENCRYPTION);
    ObjectIdentifier curveOID = nested.getOID();
    assertEquals(curveOID.toString(), ObjectIdentifier.ECDSA_P521);

    // Account for all of the bytes in the first sequence
    assertEquals(encryptionOID.value.length + curveOID.value.length + 4, nested.length);

    // The last portion of the key is the public key in a bit string
    assertEquals(sequence[1].tag.value, Tag.BitString);
    assertEquals(sequence[1].getBitString().length(), 1064);
    assertEquals(sequence[1].getBitString
  }

  @Test
  public void rsa_public_key_2048() throws Exception {
    // PKCS#1 PEM format, but the public key extracted will contain the encapsulated encoding
    PEM pem = PEM.decode(Paths.get("src/test/resources/rsa_public_key_2048.pem"));

    // DER Encoded Public Key Format SubjectPublicKeyInfo
    // ------------------------------------------------------
    // SubjectPublicKeyInfo ::= SEQUENCE {
    //   algorithm         AlgorithmIdentifier,
    //   subjectPublicKey  BIT STRING
    // }
    //
    // AlgorithmIdentifier ::= SEQUENCE {
    //   algorithm       OBJECT IDENTIFIER,
    //   parameters      ANY DEFINED BY algorithm OPTIONAL
    // }

    DerInputStream is = new DerInputStream(pem.publicKey.getEncoded());
    DerValue[] sequence = is.getSequence();

    assertEquals(sequence.length, 2);
    assertTrue(sequence[0].tag.is(Tag.Sequence));

    DerInputStream nested = new DerInputStream(sequence[0].toByteArray());
    ObjectIdentifier encryptionOID = nested.getOID();
    assertEquals(encryptionOID.toString(), ObjectIdentifier.RSA_ENCRYPTION);

    // The RSA key has a NULL following the encryption Object Identifier, NULL tag followed by 0
    Tag tag = new Tag(nested.data.read());
    assertEquals(tag.value, Tag.Null);
    assertEquals(nested.data.read(), 0);

    // Account for all of the bytes in the first sequence
    assertEquals(encryptionOID.value.length + 4, nested.length);

    // The last portion of the key is the public key in a bit string
    assertEquals(sequence[1].tag.value, Tag.BitString);
    assertEquals(sequence[1].getBitString().length(), 2208);
    assertEquals(sequence[1].getBitString
  }

  @Test
  public void rsa_public_key_3072() throws Exception {
    PEM pem = PEM.decode(Paths.get("src/test/resources/rsa_public_key_3072.pem"));

    // DER Encoded Public Key Format SubjectPublicKeyInfo
    // ------------------------------------------------------
    // SubjectPublicKeyInfo ::= SEQUENCE {
    //   algorithm         AlgorithmIdentifier,
    //   subjectPublicKey  BIT STRING
    // }
    //
    // AlgorithmIdentifier ::= SEQUENCE {
    //   algorithm       OBJECT IDENTIFIER,
    //   parameters      ANY DEFINED BY algorithm OPTIONAL
    // }

    DerInputStream is = new DerInputStream(pem.publicKey.getEncoded());
    DerValue[] sequence = is.getSequence();

    assertEquals(sequence.length, 2);
    assertTrue(sequence[0].tag.is(Tag.Sequence));

    DerInputStream nested = new DerInputStream(sequence[0].toByteArray());

    ObjectIdentifier encryptionOID = nested.getOID();
    assertEquals(encryptionOID.toString(), ObjectIdentifier.RSA_ENCRYPTION);

    // The RSA key has a NULL following the encryption Object Identifier, NULL tag followed by 0
    Tag tag = new Tag(nested.data.read());
    assertEquals(tag.value, Tag.Null);
    assertEquals(nested.data.read(), 0);

    // Account for all of the bytes in the first sequence
    assertEquals(encryptionOID.value.length + 4, nested.length);

    // The last portion of the key is the public key in a bit string
    assertEquals(sequence[1].tag.value, Tag.BitString);
    assertEquals(sequence[1].getBitString().length(), 3184);
    assertEquals(sequence[1].getBitString
  }

  @Test
  public void rsa_public_key_4096() throws Exception {
    PEM pem = PEM.decode(Paths.get("src/test/resources/rsa_public_key_4096.pem"));

    // DER Encoded Public Key Format SubjectPublicKeyInfo
    // ------------------------------------------------------
    // SubjectPublicKeyInfo ::= SEQUENCE {
    //   algorithm         AlgorithmIdentifier,
    //   subjectPublicKey  BIT STRING
    // }
    //
    // AlgorithmIdentifier ::= SEQUENCE {
    //   algorithm       OBJECT IDENTIFIER,
    //   parameters      ANY DEFINED BY algorithm OPTIONAL
    // }

    DerInputStream is = new DerInputStream(pem.publicKey.getEncoded());
    DerValue[] sequence = is.getSequence();

    assertEquals(sequence.length, 2);
    assertTrue(sequence[0].tag.is(Tag.Sequence));

    DerInputStream nested = new DerInputStream(sequence[0].toByteArray());

    ObjectIdentifier encryptionOID = nested.getOID();
    assertEquals(encryptionOID.toString(), ObjectIdentifier.RSA_ENCRYPTION);

    // The RSA key has a NULL following the encryption Object Identifier, NULL tag followed by 0
    Tag tag = new Tag(nested.data.read());
    assertEquals(tag.value, Tag.Null);
    assertEquals(nested.data.read(), 0);

    // Account for all of the bytes in the first sequence
    assertEquals(encryptionOID.value.length + 4, nested.length);

    // The last portion of the key is the public key in a bit string
    assertEquals(sequence[1].tag.value, Tag.BitString);
    assertEquals(sequence[1].getBitString().length(), 4208);
    assertEquals(sequence[1].getBitString
  }
}
